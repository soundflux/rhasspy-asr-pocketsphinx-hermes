name: Docker Build/Publish Pocketsphinx Armv7 Image
on:
  push:
    branches: [ master ]
jobs:
  build:
    runs-on: ubuntu-18.04
    env:
      DOCKER_REGISTRY: registry.gitlab.com
      DOCKER_IMAGE: soundflux/rhasspy/rhasspy-asr-pocketsphinx-hermes-armv7
      DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
      DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
      DOCKER_TARGET_PLATFORM: linux/arm/v7
    steps:
    - name: Checkout the code
      uses: actions/checkout@v1
    - name: Set up Docker Buildx
      uses: crazy-max/ghaction-docker-buildx@v1
      with:
        version: latest
    - name: Prepare
      if: success()
      id: prepare
      run: |
        echo ::set-output name=docker_platform::${DOCKER_TARGET_PLATFORM}
        echo ::set-output name=docker_image::${DOCKER_REGISTRY}/${DOCKER_IMAGE}
        echo ::set-output name=version::${GITHUB_RUN_NUMBER}
    - name: Docker Login
      if: success()
      run: |
        echo "${DOCKER_PASSWORD}" | docker login ${DOCKER_REGISTRY} --username "${DOCKER_USERNAME}" --password-stdin
    - name: Cache Docker layers
      uses: actions/cache@v2
      id: cache-pocketsphinx-v7
      with:
        path: /tmp/.buildx-cache-pocketsphinx-v7
        key: ${{ runner.os }}-buildx-${{ github.sha }}
        restore-keys: |
          ${{ runner.os }}-buildx-
    - name: Build and Push pocketsphinx-v7 Image
      if: success()
      run: |
        docker buildx build \
        --cache-from "type=local,src=/tmp/.buildx-cache-pocketsphinx-v7" \
        --cache-to "type=local,dest=/tmp/.buildx-cache-pocketsphinx-v7" \
        --platform ${{ steps.prepare.outputs.docker_platform }} \
        --tag ${{ steps.prepare.outputs.docker_image }}:${{ steps.prepare.outputs.version }} \
        --tag ${{ steps.prepare.outputs.docker_image }}:latest \
        --file ./Dockerfile-armv7 \
        --output type=image,push=true .